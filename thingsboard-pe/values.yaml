# ThingsBoard PE Helm Chart Configuration
# 
# This file contains default values for development/testing environments.
# For production deployments:
# 1. Copy this file: cp values.yaml values-production.yaml
# 2. Customize values-production.yaml for your environment
# 3. Deploy: helm install thingsboard-pe . -f values-production.yaml
#
# SECURITY: Never commit real certificates or secrets to version control!

# Global configuration
global:
  namespace: thingsboard-qa
  imageRegistry: ""
  imagePullSecrets: []

# ThingsBoard configuration
thingsboard:
  image:
    registry: docker.io/thingsboard/tb-pe-node
    tag: "4.0.1PE"
    pullPolicy: IfNotPresent
  
  # Core service configuration
  node:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: "12"
        memory: 25Gi
      requests:
        cpu: "6"
        memory: 20Gi
    
    # DTLS Configuration
    dtls:
      enabled: true
      certificatesConfigMap: coap-pem-configmap
      
    # Environment variables
    env:
      TB_LICENSE_SECRET: "biGeBHrEO4LaxCqPQa9imyFL"
      TB_LICENSE_VALIDATION_ENABLED: "false"
      SWAGGER_ENABLED: "true"
      TB_KAFKA_SERVERS: "thingsboard-kafka:9092"
      
  # Transport services
  transports:
    coap:
      enabled: true
      replicas: 4
      image:
        registry: docker.io/thingsboard/tb-pe-coap-transport
        tag: "4.0.1PE"
      port: 5684
      dtlsEnabled: true
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      resources:
        limits:
          cpu: 410m
          memory: 8Gi
        requests:
          cpu: 410m
          memory: 8Gi
      env:
        TB_KAFKA_SERVERS: "thingsboard-kafka:9092"
        COAP_TIMEOUT: "60000"
        TB_QUEUE_REQUEST_TIMEOUT: "120000"
    
    http:
      enabled: true
      replicas: 1
      image:
        registry: docker.io/thingsboard/tb-pe-http-transport
        tag: "4.0.1PE"
      port: 8080
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      resources:
        limits:
          cpu: 500m
          memory: 4Gi
        requests:
          cpu: 500m
          memory: 4Gi

  # Web UI
  webui:
    enabled: true
    replicas: 1
    image:
      registry: docker.io/thingsboard/tb-pe-web-ui
      tag: "4.0.1PE"
    service:
      type: LoadBalancer
      port: 8080
    resources:
      limits:
        cpu: 500m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 2Gi

  # JS Executor
  jsExecutor:
    enabled: true
    replicas: 1
    image:
      registry: docker.io/thingsboard/tb-pe-js-executor
      tag: "4.0.1PE"
    resources:
      limits:
        cpu: 1000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 4Gi

# Database configuration
cassandra:
  enabled: true
  image:
    registry: docker.io/bitnami/cassandra
    tag: "4.0.11-debian-11-r10"
  cluster:
    name: cassandra
    datacenter: dc1
    rack: rack1
    seeds: "thingsboard-cassandra-0.thingsboard-cassandra-headless"
  resources:
    limits:
      memory: 32Gi
    requests:
      memory: 30Gi
  storage:
    size: 100Gi
    storageClass: ""

# Message queue configuration
kafka:
  enabled: true
  image:
    registry: docker.io/bitnami/kafka
    tag: "3.5.1-debian-11-r10"
  replicas: 3
  resources:
    limits:
      cpu: 2000m
      memory: 8Gi
    requests:
      cpu: 1000m
      memory: 4Gi
  storage:
    size: 50Gi
    storageClass: ""
  zookeeper:
    servers: "thingsboard-zookeeper:2181"

# Cache configuration
redis:
  enabled: true
  image:
    registry: docker.io/bitnami/redis
    tag: "7.2.1-debian-11-r12"
  auth:
    enabled: true
    password: "setplease"
  master:
    resources:
      limits:
        cpu: 1000m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
  storage:
    size: 20Gi
    storageClass: ""

# Zookeeper configuration
zookeeper:
  enabled: true
  image:
    registry: docker.io/bitnami/zookeeper
    tag: "3.9.0-debian-11-r18"
  replicas: 3
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 2Gi
  storage:
    size: 20Gi
    storageClass: ""

# Security
security:
  certificates:
    enabled: true
    dtls:
      # SECURITY WARNING: Replace these placeholders with your actual certificates
      # DO NOT commit real certificates to version control!
      # 
      # To generate DTLS certificates:
      # openssl ecparam -genkey -name secp256r1 -out server.key
      # openssl req -new -x509 -key server.key -out server.pem -days 365 \
      #   -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=your-coap-endpoint"
      #
      # Then add them via Helm values or external secret management:
      # --set security.certificates.dtls.serverCert="$(cat server.pem)"
      # --set security.certificates.dtls.serverKey="$(cat server.key)"
      
      serverCert: |
        # PLACEHOLDER: Add your DTLS server certificate here
        # Example format:
        # -----BEGIN CERTIFICATE-----
        # MIIBdTCCAZsCFE...your_certificate_content_here...
        # -----END CERTIFICATE-----
        
      serverKey: |
        # PLACEHOLDER: Add your DTLS private key here  
        # Example format:
        # -----BEGIN EC PRIVATE KEY-----
        # MHcCAQEEI...your_private_key_content_here...
        # -----END EC PRIVATE KEY-----

# Horizontal Pod Autoscaling
autoscaling:
  enabled: true
  coap:
    minReplicas: 4
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  http:
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
