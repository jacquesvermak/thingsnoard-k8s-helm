cassandra:
  affinity: {}
  args: null
  cluster:
    clientEncryption: false
    datacenter: dc1
    enableUDF: false
    endpointSnitch: SimpleSnitch
    extraSeeds: null
    internodeEncryption: none
    name: cassandra
    numTokens: 256
    rack: rack1
    seedCount: 1
  clusterDomain: cluster.local
  command: null
  enabled: true
  existingConfiguration: ''
  extraDeploy: null
  extraEnvVars:
    - name: BITNAMI_DEBUG
      value: 'false'
    - name: CASSANDRA_SEEDS
      value: thingsboard-cassandra-0.thingsboard-cassandra-headless.thingsboard-qa.svc.cluster.local
    - name: POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: CASSANDRA_KEYSTORE_LOCATION
      value: /opt/bitnami/cassandra/certs/keystore
    - name: CASSANDRA_TRUSTSTORE_LOCATION
      value: /opt/bitnami/cassandra/certs/truststore
    - name: CASSANDRA_TRANSPORT_PORT_NUMBER
      value: '7000'
    - name: CASSANDRA_JMX_PORT_NUMBER
      value: '7199'
    - name: CASSANDRA_CQL_PORT_NUMBER
      value: '9042'
    - name: CASSANDRA_AUTHENTICATOR
      value: AllowAllAuthenticator
    - name: CASSANDRA_AUTHORIZER
      value: AllowAllAuthorizer
    - name: CASSANDRA_CONCURRENT_WRITES
      value: '128'
    - name: CASSANDRA_CONCURRENT_READS
      value: '64'
    - name: CASSANDRA_CONCURRENT_COUNTER_WRITES
      value: '128'
    - name: CASSANDRA_MEMTABLE_HEAP_SPACE_IN_MB
      value: '3072'
    - name: CASSANDRA_MEMTABLE_OFFHEAP_SPACE_IN_MB
      value: '3072'
    - name: CASSANDRA_COMMITLOG_TOTAL_SPACE_IN_MB
      value: '8192'
    - name: CASSANDRA_NATIVE_TRANSPORT_MAX_THREADS
      value: '128'
    - name: CASSANDRA_RPC_MAX_THREADS
      value: '2048'
    - name: CASSANDRA_RPC_MIN_THREADS
      value: '16'
    - name: CASSANDRA_BATCH_SIZE_WARN_THRESHOLD_IN_KB
      value: '128'
    - name: CASSANDRA_BATCH_SIZE_FAIL_THRESHOLD_IN_KB
      value: '1280'
    - name: CASSANDRA_REQUEST_TIMEOUT_IN_MS
      value: '30000'
    - name: CASSANDRA_WRITE_REQUEST_TIMEOUT_IN_MS
      value: '30000'
    - name: CASSANDRA_READ_REQUEST_TIMEOUT_IN_MS
      value: '30000'
    - name: CASSANDRA_COUNTER_WRITE_REQUEST_TIMEOUT_IN_MS
      value: '30000'
    - name: CASSANDRA_CONCURRENT_COMPACTORS
      value: '4'
    - name: CASSANDRA_COMPACTION_THROUGHPUT_MB_PER_SEC
      value: '128'
    - name: CASSANDRA_ENABLE_USER_DEFINED_FUNCTIONS
      value: 'false'
    - name: CASSANDRA_ENABLE_SCRIPTED_USER_DEFINED_FUNCTIONS
      value: 'false'
    - name: CASSANDRA_AUTO_SNAPSHOT
      value: 'false'
    - name: CASSANDRA_SNAPSHOT_BEFORE_COMPACTION
      value: 'false'
    - name: CASSANDRA_NATIVE_TRANSPORT_MAX_FRAME_SIZE_IN_MB
      value: '256'
    - name: JVM_OPTS
      value: >-
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcassandra.native_transport_max_concurrent_connections=2048
        -Dcassandra.native_transport_max_concurrent_connections_per_ip=1024
        -Xloggc:/var/log/cassandra/gc.log
        -XX:+PrintGCDetails
        -XX:+PrintGCDateStamps
        -XX:+PrintGCTimeStamps
  # ...existing code up to the first occurrence of each key...
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: null
  extraVolumes: null
  fullnameOverride: ''
  global:
    image:
      pullPolicy: Always
      pullSecrets: null
      server: docker.io
      tag: 4.0.1
    imagePullSecrets: null
    imageRegistry: ''
    jsonLogs: false
    storageClass: ''
  hostAliases: null
  hostNetwork: false
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: docker.io
    repository: bitnami/cassandra
    tag: 4.0.3-debian-10-r8
  initContainers: null
  initDBConfigMap: ''
  initDBSecret: ''
  jvm:
    extraOpts: ''
    maxHeapSize: '12g'
    newHeapSize: '2400m'
  kubeVersion: ''
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    containerPorts:
      http: 8080
      jmx: 5555
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/cassandra-exporter
      tag: 2.3.7-debian-10-r24
    podAnnotations:
      prometheus.io/port: '8080'
      prometheus.io/scrape: 'true'
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: ''
      jobLabel: ''
      metricRelabelings: null
      namespace: monitoring
      scrapeTimeout: ''
      selector: {}
  nameOverride: ''
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeAffinityPreset:
    key: ''
    type: ''
    values: null
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /bitnami/cassandra
    size: 150Gi
    storageClass: 'ebs-sc'
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 3
  resources:
    limits:
    memory: 32G
  requests:
    memory: 30G
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: null
    loadBalancerIP: ''
    loadBalancerSourceRanges: null
    nodePorts:
      cql: ''
      metrics: ''
    ports:
      cql: 9042
      metrics: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ''
  sidecars: null
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tls:
    autoGenerated: false
    certificatesSecret: ''
    clientEncryption: false
    existingSecret: ''
    internodeEncryption: none
    keystorePassword: ''
    passwordsSecret: ''
    resources:
      limits: {}
      requests: {}
    tlsEncryptionSecretName: ''
    truststorePassword: ''
  tolerations: null
  topologySpreadConstraints: null
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r349
    securityContext:
      runAsUser: 0
  configuration:
    read_request_timeout_in_ms: 5000
    tombstone_failure_threshold: 200000
    tombstone_warn_threshold: 5000
    write_request_timeout_in_ms: 5000
cassandraInitDB:
  keyspace: thingsboard
  replication:
    class: SimpleStrategy
    factor: 2
coap:
  affinity: {}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: ThingsBoardClusterELB=ThingsBoardCoap
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 4
    targetCPUUtilizationPercentage: 80
  image:
    repository: thingsboard/tb-pe-coap-transport
  kind: StatefulSet
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  port:
    name: coap-dtls
    number: 5684
    protocol: UDP
  replicaCount: 4
  securityContext: {}
  service:
    additionalPorts: null
    port: 5684
    type: LoadBalancer
    externalTrafficPolicy: Local
  timeout: 10000
  tolerations: null
  resources:
    limits:
      cpu: 410m
      memory: 8Gi
    requests:
      cpu: 410m
      memory: 8Gi
  volumeMounts:
    - name: thingsboard-coap-transport-config
      mountPath: /config
    - name: coap-pem-configmap
      mountPath: /https-config
    - name: coap-gc-logs
      mountPath: /var/log/tb
  volumes:
    - name: thingsboard-coap-transport-config
      configMap:
        name: thingsboard-coap-transport-config
        items:
          - key: conf
            path: tb-coap-transport.conf
          - key: logback
            path: logback.xml
        defaultMode: 420
    - name: coap-pem-configmap
      configMap:
        name: coap-pem-configmap
        items:
          - key: server.pem
            path: server.pem
          - key: server_key.pem
            path: server_key.pem
        defaultMode: 444
    - name: thingsboard-node-logs
      emptyDir: {}
    - name: coap-gc-logs
      emptyDir: {}
  serviceAccountName: thingsboard
  serviceAccount: thingsboard
  statefulset:
    enabled: true
    name: thingsboard-coap-transport
    replicas: 4
common:
  exampleValue: common-chart
  global:
    image:
      pullPolicy: Always
      pullSecrets: null
      server: docker.io
      tag: 4.0.1
    jsonLogs: false
evp:
  mqtt:
    enabled: false
fullnameOverride: ''
global:
  image:
    pullPolicy: Always
    pullSecrets: null
    server: docker.io
    tag: 4.0.1PE
  jsonLogs: false
http:
  affinity: {}
  annotations: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  image:
    repository: thingsboard/tb-pe-http-transport
  kind: StatefulSet
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  port:
    name: http
    number: 8082
    protocol: TCP
  replicaCount: 1
  # ...existing code...
  securityContext: {}
  service:
    additionalPorts: null
    port: 8082
    type: ClusterIP
  timeout: 10000
  tolerations: null
  # ...existing code...
  volumeMounts:
    - name: thingsboard-http-transport-config
      mountPath: /config
  volumes:
    - name: thingsboard-http-transport-config
      configMap:
        name: thingsboard-http-transport-config
        items:
          - key: conf
            path: tb-http-transport.conf
          - key: logback
            path: logback.xml
        defaultMode: 420
    - name: thingsboard-node-logs
      emptyDir: {}
  serviceAccountName: thingsboard
  serviceAccount: thingsboard
  statefulset:
    enabled: true
    name: thingsboard-http-transport
    replicas: 1
ingress:
  annotations: {}
  enabled: false
  hosts:
    - chart-example.local
  tls: false
initDBJob:
  affinity: {}
  fromVersion: 3.9.1
  nodeSelector: {}
  tolerations: null
jsexecutor:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  image:
    repository: thingsboard/tb-pe-js-executor
  kind: Deployment
  logger:
    level: info
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 5
  securityContext: {}
  tolerations: null
kafkaScriptsConfigMap:
  enabled: true
  name: thingsboard-kafka-scripts
  setupScript: |-
    #!/bin/bash
    ID="${MY_POD_NAME#\"thingsboard-kafka-\"}"
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 0))"
    fi
    exec /entrypoint.sh /run.sh
kafka:
  advertisedListeners: null
  affinity: {}
  allowEveryoneIfNoAclFound: true
  allowPlaintextListener: true
  args: null
  auth:
    clientProtocol: plaintext
    externalClientProtocol: ''
    interBrokerProtocol: plaintext
    sasl:
      interBrokerMechanism: plain
      jaas:
        clientPasswords: null
        clientUsers:
          - user
        existingSecret: ''
        interBrokerPassword: ''
        interBrokerUser: admin
        zookeeperPassword: ''
        zookeeperUser: ''
      mechanisms: plain,scram-sha-256,scram-sha-512
    tls:
      autoGenerated: false
      endpointIdentificationAlgorithm: https
      existingSecret: ''
      existingSecrets: null
      jksKeystoreSAN: ''
      jksTruststore: ''
      jksTruststoreSecret: ''
      password: ''
      pemChainIncluded: false
      type: jks
    zookeeper:
      tls:
        enabled: false
        existingSecret: ''
        existingSecretKeystoreKey: zookeeper.keystore.jks
        existingSecretTruststoreKey: zookeeper.truststore.jks
        passwordsSecret: ''
    statefulset:
      enabled: true
      name: thingsboard-kafka
      replicas: 4
  kafkaScriptsConfigMap:
    enabled: true
    name: thingsboard-kafka-scripts
    setupScript: |-
      #!/bin/bash
      ID="${MY_POD_NAME#\"thingsboard-kafka-\"}"
      if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
          export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
      else
          export KAFKA_CFG_BROKER_ID="$((ID + 0))"
      fi
      exec /entrypoint.sh /run.sh
        passwordsSecretKeystoreKey: keystore-password
        passwordsSecretTruststoreKey: truststore-password
        type: jks
        verifyHostname: true
  authorizerClassName: ''
  autoCreateTopicsEnable: true
  brokerRackAssignment: ''
  clusterDomain: cluster.local
  command:
    - /scripts/setup.sh
  common:
    exampleValue: common-chart
    global:
      image:
        pullPolicy: Always
        pullSecrets: null
        server: docker.io
        tag: 4.0.1
      imagePullSecrets: null
      imageRegistry: ''
      jsonLogs: false
      storageClass: ''
  commonAnnotations: {}
  commonLabels: {}
  config: ''
  containerPorts:
    client: 9092
    external: 9094
    internal: 9093
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  defaultReplicationFactor: 1
  deleteTopicEnable: false
  diagnosticMode:
    args:
      - infinity
    command:
      - sleep
    enabled: false
  existingConfigmap: ''
  existingLog4jConfigMap: ''
  externalAccess:
    autoDiscovery:
      enabled: false
      image:
        digest: ''
        pullPolicy: IfNotPresent
        pullSecrets: null
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.23.4-debian-10-r9
      resources:
        limits: {}
        requests: {}
    enabled: false
    service:
      annotations: {}
      domain: ''
      extraPorts: null
      labels: {}
      loadBalancerAnnotations: null
      loadBalancerIPs: null
      loadBalancerNames: null
      loadBalancerSourceRanges: null
      nodePorts: null
      ports:
        external: 9094
      publishNotReadyAddresses: false
      type: LoadBalancer
      useHostIPs: false
      usePodIPs: false
  externalZookeeper:
    servers: null
  extraDeploy: null
  extraEnvVars: null
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: null
  extraVolumes: null
  fullnameOverride: ''
  global:
    image:
      pullPolicy: Always
      pullSecrets: null
      server: docker.io
      tag: 4.0.1
    imagePullSecrets: null
    imageRegistry: ''
    jsonLogs: false
    storageClass: ''
  heapOpts: '-Xmx1024m -Xms1024m'
  hostAliases: null
  hostIPC: false
  hostNetwork: false
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: docker.io
    repository: bitnami/kafka
    tag: 4.0.0-debian-12-r9
  initContainers: null
  interBrokerListenerName: INTERNAL
  kubeVersion: ''
  lifecycleHooks: {}
  listenerSecurityProtocolMap: ''
  listeners: null
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  log4j: ''
  logFlushIntervalMessages: _10000
  logFlushIntervalMs: 1000
  logPersistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ''
    mountPath: /opt/bitnami/kafka/logs
    selector: {}
    size: 8Gi
    storageClass: ''
  logRetentionBytes: _1073741824
  logRetentionCheckIntervalMs: 300000
  logRetentionHours: 168
  logSegmentBytes: _1073741824
  logsDirs: /bitnami/kafka/data
  maxMessageBytes: _1000012
  metrics:
    jmx:
      config: >-
        jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi

        lowercaseOutputName: true

        lowercaseOutputLabelNames: true

        ssl: false

        {{- if .Values.metrics.jmx.whitelistObjectNames }}

        whitelistObjectNames: ["{{ join "\",\""
        .Values.metrics.jmx.whitelistObjectNames }}"]

        {{- end }}
      containerPorts:
        metrics: 5556
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      existingConfigmap: ''
      extraRules: ''
      image:
        digest: ''
        pullPolicy: IfNotPresent
        pullSecrets: null
        registry: docker.io
        repository: bitnami/jmx-exporter
        tag: 0.16.1-debian-10-r222
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /
          prometheus.io/port: '{{ .Values.metrics.jmx.service.ports.metrics }}'
          prometheus.io/scrape: 'true'
        clusterIP: ''
        ports:
          metrics: 5556
        sessionAffinity: None
      whitelistObjectNames:
        - kafka.controller:*
        - kafka.server:*
        - java.lang:*
        - kafka.network:*
        - kafka.log:*
    kafka:
      affinity: {}
      args: null
      certificatesSecret: ''
      command: null
      containerPorts:
        metrics: 9308
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      extraFlags: {}
      extraVolumeMounts: null
      extraVolumes: null
      hostAliases: null
      image:
        digest: ''
        pullPolicy: IfNotPresent
        pullSecrets: null
        registry: docker.io
        repository: bitnami/kafka-exporter
        tag: 1.4.2-debian-10-r160
      initContainers: null
      nodeAffinityPreset:
        key: ''
        type: ''
        values: null
      nodeSelector: {}
      podAffinityPreset: ''
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ''
      resources:
        limits: {}
        requests: {}
      schedulerName: ''
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.kafka.service.ports.metrics }}'
          prometheus.io/scrape: 'true'
        clusterIP: ''
        ports:
          metrics: 9308
        sessionAffinity: None
      serviceAccount:
        automountServiceAccountToken: true
        create: true
        name: ''
      sidecars: null
      tlsCaCert: ca-file
      tlsCaSecret: ''
      tlsCert: cert-file
      tlsKey: key-file
      tolerations: null
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ''
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ''
      jobLabel: ''
      labels: {}
      metricRelabelings: null
      namespace: ''
      relabelings: null
      scrapeTimeout: ''
      selector: {}
  minBrokerId: 0
  nameOverride: ''
  networkPolicy:
    allowExternal: true
    egressRules:
      customRules: null
    enabled: false
    explicitNamespacesSelector: {}
    externalAccess:
      from: null
  nodeAffinityPreset:
    key: ''
    type: ''
    values: null
  nodeSelector: {}
  numIoThreads: 8
  numNetworkThreads: 3
  numPartitions: 1
  numRecoveryThreadsPerDataDir: 1
  offsetsTopicReplicationFactor: 1
  pdb:
    create: false
    maxUnavailable: 1
    minAvailable: ''
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    labels: {}
    mountPath: /bitnami/kafka
    selector: {}
    size: 8Gi
    storageClass: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  provisioning:
    args: null
    auth:
      tls:
        caCert: ca.crt
        cert: tls.crt
        certificatesSecret: ''
        key: tls.key
        keyPassword: ''
        keyPasswordSecretKey: key-password
        keystore: keystore.jks
        keystorePassword: ''
        keystorePasswordSecretKey: keystore-password
        passwordsSecret: ''
        truststore: truststore.jks
        truststorePassword: ''
        truststorePasswordSecretKey: truststore-password
        type: jks
    command: null
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    enabled: false
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: null
    extraVolumes: null
    initContainers: null
    nodeSelector: {}
    numPartitions: 1
    parallel: 1
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    postScript: ''
    preScript: ''
    replicationFactor: 1
    schedulerName: ''
    serviceAccount:
      automountServiceAccountToken: true
      create: false
      name: ''
    sidecars: null
    topics: null
    waitForKafka: true
  rbac:
    create: false
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: null
    headless:
      annotations: {}
      labels: {}
      publishNotReadyAddresses: false
    loadBalancerIP: ''
    loadBalancerSourceRanges: null
    nodePorts:
      client: ''
      external: ''
    ports:
      client: 9092
      external: 9094
      internal: 9093
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ''
  sidecars: null
  socketReceiveBufferBytes: 102400
  socketRequestMaxBytes: _104857600
  socketSendBufferBytes: 102400
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  superUsers: User:admin
  terminationGracePeriodSeconds: ''
  tolerations: null
  transactionStateLogMinIsr: 1
  transactionStateLogReplicationFactor: 1
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r351
      requests: {}
  zookeeper:
    affinity: {}
    args: null
    auth:
      client:
        clientPassword: ''
        clientUser: ''
        enabled: false
        existingSecret: ''
        serverPasswords: ''
        serverUsers: ''
      quorum:
        enabled: false
        existingSecret: ''
        learnerPassword: ''
        learnerUser: ''
        serverPasswords: ''
        serverUsers: ''
      clientPassword: ''
      clientUser: ''
      enabled: false
      existingSecret: ''
      serverPasswords: ''
      serverUsers: ''
    autopurge:
      purgeInterval: 0
      snapRetainCount: 3
    clusterDomain: cluster.local
    command:
      - /scripts/setup.sh
    common:
      exampleValue: common-chart
      global:
        image:
          pullPolicy: Always
          pullSecrets: null
          server: docker.io
          tag: 4.0.1
        imagePullSecrets: null
        imageRegistry: ''
        jsonLogs: false
        storageClass: ''
    commonAnnotations: {}
    commonLabels: {}
    configuration: ''
    containerPorts:
      client: 2181
      election: 3888
      follower: 2888
      tls: 3181
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    dataLogDir: ''
    diagnosticMode:
      args:
        - infinity
      command:
        - sleep
      enabled: false
    enabled: true
    existingConfigmap: ''
    extraDeploy: null
    extraEnvVars: null
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: null
    extraVolumes: null
    fourlwCommandsWhitelist: srvr, mntr, ruok
    fullnameOverride: ''
    global:
      image:
        pullPolicy: Always
        pullSecrets: null
        server: docker.io
        tag: 4.0.1
      imagePullSecrets: null
      imageRegistry: ''
      jsonLogs: false
      storageClass: ''
    heapSize: 1024
    hostAliases: null
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/zookeeper
      tag: 3.7.0-debian-10-r303
    initContainers: null
    initLimit: 10
    jvmFlags: ''
    kubeVersion: ''
    lifecycleHooks: {}
    listenOnAllIPs: false
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    logLevel: ERROR
    maxClientCnxns: 60
    maxSessionTimeout: 40000
    metrics:
      containerPort: 9141
      enabled: false
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ''
        rules: null
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: 'true'
        port: 9141
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: ''
        jobLabel: ''
        metricRelabelings: null
        namespace: ''
        relabelings: null
        scrapeTimeout: ''
        selector: {}
    minServerId: 1
    nameOverride: ''
    namespaceOverride: ''
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ''
      type: ''
      values: null
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: 1
      minAvailable: ''
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      dataLogDir:
        existingClaim: ''
        selector: {}
        size: 8Gi
      enabled: true
      existingClaim: ''
      selector: {}
      size: 8Gi
      storageClass: ''
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preAllocSize: 65536
    priorityClassName: ''
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 3
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ''
    service:
      annotations: {}
      clusterIP: ''
      disableBaseClientPort: false
      externalTrafficPolicy: Cluster
      extraPorts: null
      headless:
        annotations: {}
        publishNotReadyAddresses: true
      loadBalancerIP: ''
      loadBalancerSourceRanges: null
      nodePorts:
        client: ''
        tls: ''
      ports:
        client: 2181
        election: 3888
        follower: 2888
        tls: 3181
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ''
    sidecars: null
    snapCount: 100000
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    syncLimit: 5
    tickTime: 2000
    tls:
      client:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ''
        existingSecretKeystoreKey: ''
        existingSecretTruststoreKey: ''
        keystorePassword: ''
        keystorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ''
        passwordsSecretName: ''
        passwordsSecretTruststoreKey: ''
        truststorePassword: ''
        truststorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks
      quorum:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ''
        existingSecretKeystoreKey: ''
        existingSecretTruststoreKey: ''
        keystorePassword: ''
        keystorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ''
        passwordsSecretName: ''
        passwordsSecretTruststoreKey: ''
        truststorePassword: ''
        truststorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks
      resources:
        limits: {}
        requests: {}
    tolerations: null
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    volumePermissions:
      containerSecurityContext:
        enabled: true
        runAsUser: 0
      enabled: false
      image:
        digest: ''
        pullPolicy: IfNotPresent
        pullSecrets: null
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r349
      resources:
        limits: {}
        requests: {}
    topologySpreadConstraints: {}
  zookeeperChrootPath: ''
  zookeeperConnectionTimeoutMs: 6000
  topologySpreadConstraints: {}
monitoring:
  enabled: true
mqtt:
  affinity: {}
  annotations: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  evp:
    image:
      repository: setplease
      server: setplease
      tag: setplease
  http:
    port:
      name: http
      number: 8082
      protocol: TCP
  image:
    repository: thingsboard/tb-pe-mqtt-transport
  kind: StatefulSet
  log:
    loggers:
      - <logger name="org.thingsboard.server" level="INFO" />
    root:
      level: INFO
  nodeSelector: {}
  podAnnotations:
    prometheus.io/path: /actuator/prometheus
    prometheus.io/port: '8082'
    prometheus.io/scrape: 'true'
  podSecurityContext: {}
  port:
    name: mqtt
    number: 1883
    protocol: TCP
  replicaCount: 0
  securityContext: {}
  service:
    additionalPorts: null
    ipv6: false
    loadBalancerSourceRanges: null
    port: 1883
    type: ClusterIP
  ssl:
    enabled: false
    secret: kubernetes-secret
  timeout: 10000
  tolerations: null
nameOverride: ''
node:
  affinity: {}
  authorization:
    refreshTokenExpirationTimeSeconds: '604800'
    tokenExpirationTimeSeconds: '9000'
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  image:
    repository: thingsboard/tb-pe-node
    tag: 4.0.1PE
    pullPolicy: Always
  kind: StatefulSet
  loadDemo: false
  log:
    fileAppenderEnabled: false
    loggers:
      - <logger name="org.thingsboard.server" level="INFO" />
      - >-
        <logger name="com.google.common.util.concurrent.AggregateFuture"
        level="OFF" />
    root:
      level: INFO
  nodeSelector: {}
  podAnnotations:
    prometheus.io/path: /actuator/prometheus
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  podSecurityContext: {}
  port:
    http: 8080
    rpc: 9090
  replicaCount: 1
  resources:
    limits:
      memory: 30Gi
    requests:
      memory: 20Gi
  ruleChain:
    configmapName: null
  securityContext: {}
  service:
    port: 8080
    type: ClusterIP
  state:
    defaultInactivityTimeoutInSec: '600'
    defaultStateCheckIntervalInSec: '60'
  tolerations: null
  runAsNonRoot: true
  runAsUser: 1000
  statefulset:
    enabled: true
    name: thingsboard-node
    replicas: 1
  volumeMounts:
    - name: thingsboard-node-config
      mountPath: /config
    - name: thingsboard-node-logs
      mountPath: /var/log/thingsboard
    - name: tb-truststore-volume
      readOnly: true
      mountPath: /opt/truststore
    - name: coap-pem-configmap
      mountPath: /https-config
    - name: gc-logs
      mountPath: /var/log/tb
  volumes:
    - name: thingsboard-node-config
      configMap:
        name: thingsboard-node-config
        items:
          - key: conf
            path: thingsboard.conf
          - key: logback
            path: logback.xml
        defaultMode: 420
    - name: thingsboard-node-logs
      emptyDir: {}
    - name: gc-logs
      emptyDir: {}
    - name: tb-truststore
      secret:
        secretName: tb-truststore
        defaultMode: 420
    - name: jvm-cacerts
      secret:
        secretName: tb-truststore
        defaultMode: 420
    - name: tb-truststore-volume
      secret:
        secretName: tb-truststore
        defaultMode: 420
    - name: coap-pem-configmap
      configMap:
        name: coap-pem-configmap
        items:
          - key: server.pem
            path: server.pem
          - key: server_key.pem
            path: server_key.pem
        defaultMode: 444
  serviceAccountName: thingsboard
  serviceAccount: thingsboard
  configMap:
    enabled: true
    name: thingsboard-node-config
    conf: |
      export JAVA_OPTS="$JAVA_OPTS -Dplatform=deb -Dinstall.data_dir=/usr/share/thingsboard/data"
      export JAVA_OPTS="$JAVA_OPTS -Xlog:gc*,heap*,age*,safepoint=debug:file=/var/log/thingsboard/${TB_SERVICE_ID}-gc.log:time,uptime,level,tags:filecount=10,filesize=10M"
      export JAVA_OPTS="$JAVA_OPTS -XX:+IgnoreUnrecognizedVMOptions -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/thingsboard/${TB_SERVICE_ID}-heapdump.bin"
      export JAVA_OPTS="$JAVA_OPTS -XX:-UseBiasedLocking -XX:+UseTLAB -XX:+ResizeTLAB -XX:+PerfDisableSharedMem -XX:+UseCondCardMark"
      export JAVA_OPTS="$JAVA_OPTS -XX:+ExitOnOutOfMemoryError -XX:+UseContainerSupport -XX:MaxRAMPercentage=80"
      export JAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC  -XX:MaxGCPauseMillis=200  -XX:InitiatingHeapOccupancyPercent=45  -XX:ConcGCThreads=4  -XX:ParallelGCThreads=8  -XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/var/log/thingsboard/heapdump.hprof"
      export LOG_FILENAME=thingsboard.out
      export LOADER_PATH=/usr/share/thingsboard/conf,/usr/share/thingsboard/extensions
      export TB_SERVICE_TYPE=monolith
      export METRICS_ENABLED=true
      export TB_QUEUE_KAFKA_PARTITIONS=10
      export COAP_DTLS_ENABLED=true
      export COAP_DTLS_CREDENTIALS_TYPE=PEM
      export COAP_DTLS_PEM_CERT=/https-config/server.pem
      export COAP_DTLS_PEM_KEY=/https-config/server_key.pem
postgresInitDB:
  job:
    check:
      timeout: 3
postgresql-ha:
  enabled: false
  nameOverride: pg
  pgpool:
    adminPassword: setplease
    replicaCount: 1
    useLoadBalancing: false
    adminUsername: admin
    affinity: {}
    authenticationMethod: scram-sha-256
    childLifeTime: ''
    childMaxConnections: ''
    clientIdleLimit: ''
    clientMinMessages: error
    configuration: ''
    configurationCM: ''
    connectionLifeTime: ''
    containerPorts:
      postgresql: 5432
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    customUsers: {}
    customUsersSecret: ''
    existingSecret: ''
    extraEnvVarsCM: ''
    statefulset:
      enabled: true
      name: thingsboard-zookeeper
      replicas: 2
    extraEnvVarsSecret: ''
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/pgpool
      tag: 4.3.3-debian-11-r22
    initdbScripts: {}
    initdbScriptsCM: ''
    initdbScriptsSecret: ''
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    loadBalancingOnWrite: transaction
    logConnections: false
    logHostname: true
    logLinePrefix: ''
    logPerNodeStatement: false
    maxPool: ''
    minReadySeconds: ''
    nodeAffinityPreset:
      key: ''
      type: ''
    nodeSelector: {}
    numInitChildren: ''
    passwords: ''
    pdb:
      create: false
      maxUnavailable: ''
      minAvailable: 1
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ''
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    reservedConnections: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ''
    serviceLabels: {}
    srCheckDatabase: postgres
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ''
    tls:
      autoGenerated: false
      certCAFilename: ''
      certFilename: ''
      certKeyFilename: ''
      certificatesSecret: ''
      enabled: false
      preferServerCiphers: true
    updateStrategy: {}
    usePasswordFile: ''
    usernames: ''
  postgresql:
    database: thingsboard
    password: VF8sjO1yR68W1LxPzwoh
    replicaCount: 1
    repmgrPassword: setplease
    affinity: {}
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: true
      logLinePrefix: ''
      logTimezone: ''
      pgAuditLog: ''
      pgAuditLogCatalog: 'off'
    configuration: ''
    configurationCM: ''
    containerPorts:
      postgresql: 5432
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    dbUserConnectionLimit: ''
    existingSecret: ''
    extendedConf: ''
    extendedConfCM: ''
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    hostIPC: false
    hostNetwork: false
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: 14.5.0-debian-11-r31
    initdbScripts: {}
    initdbScriptsCM: ''
    initdbScriptsSecret: ''
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    maxConnections: ''
    nodeAffinityPreset:
      key: ''
      type: ''
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ''
      minAvailable: 1
    pgHbaConfiguration: ''
    pgHbaTrustAll: false
    pghbaRemoveFilters: ''
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    postgresConnectionLimit: ''
    postgresPassword: ''
    priorityClassName: ''
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    repmgrChildNodesCheckInterval: 5
    repmgrChildNodesConnectedMinCount: 1
    repmgrChildNodesDisconnectTimeout: 30
    repmgrConfiguration: ''
    repmgrConnectTimeout: 5
    repmgrDatabase: repmgr
    repmgrFenceOldPrimary: false
    repmgrLogLevel: NOTICE
    repmgrPassfilePath: ''
    repmgrReconnectAttempts: 2
    repmgrReconnectInterval: 3
    repmgrUsePassfile: ''
    repmgrUsername: repmgr
    resources:
      limits: {}
      requests: {}
    schedulerName: ''
    sharedPreloadLibraries: pgaudit, repmgr
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    statementTimeout: ''
    syncReplication: false
    tcpKeepalivesCount: ''
    tcpKeepalivesIdle: ''
    tcpKeepalivesInterval: ''
    terminationGracePeriodSeconds: ''
    tls:
      certFilename: ''
      certKeyFilename: ''
      certificatesSecret: ''
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    upgradeRepmgrExtension: false
    usePasswordFile: ''
    usePgRewind: false
    username: postgres
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      image:
        pullPolicy: Always
        server: docker.io
        tag: 4.0.1
      imageRegistry: ''
      jsonLogs: false
      ldap:
        bindpw: ''
        existingSecret: ''
      pgpool:
        adminPassword: ''
        adminUsername: ''
        existingSecret: ''
      postgresql:
        database: ''
        existingSecret: ''
        password: ''
        repmgrDatabase: ''
        repmgrPassword: ''
        repmgrUsername: ''
        username: ''
      storageClass: ''
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
      - infinity
    command:
      - sleep
    enabled: false
  fullnameOverride: ''
  global:
    image:
      pullPolicy: Always
      server: docker.io
      tag: 4.0.1
    imageRegistry: ''
    jsonLogs: false
    ldap:
      bindpw: ''
      existingSecret: ''
    pgpool:
      adminPassword: ''
      adminUsername: ''
      existingSecret: ''
    postgresql:
      database: ''
      existingSecret: ''
      password: ''
      repmgrDatabase: ''
      repmgrPassword: ''
      repmgrUsername: ''
      username: ''
    storageClass: ''
  kubeVersion: ''
  ldap:
    basedn: ''
    binddn: ''
    bindpw: ''
    bslookup: ''
    enabled: false
    existingSecret: ''
    nssInitgroupsIgnoreusers: root,nslcd
    scope: ''
    tlsReqcert: ''
    uri: ''
  metrics:
    annotations:
      prometheus.io/port: '9187'
      prometheus.io/scrape: 'true'
    containerPorts:
      http: 9187
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.11.1-debian-11-r22
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podSecurityContext:
      enabled: true
      runAsUser: 1001
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      clusterIP: ''
      externalTrafficPolicy: Cluster
      loadBalancerIP: ''
      nodePorts:
        metrics: ''
      ports:
        metrics: 9187
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      honorLabels: false
      interval: ''
      jobLabel: ''
      labels: {}
      namespace: ''
      scrapeTimeout: ''
      selector:
        prometheus: kube-prometheus
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
  namespaceOverride: ''
  networkPolicy:
    allowExternal: true
    egressRules:
      denyConnectionsToExternal: false
    enabled: false
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    labels: {}
    mountPath: /bitnami/postgresql
    selector: {}
    size: 8Gi
    storageClass: ''
  pgpoolImage:
    tag: 4.3.3
  postgresqlImage:
    pullPolicy: IfNotPresent
    tag: 12
  psp:
    create: false
  rbac:
    create: false
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    loadBalancerIP: ''
    nodePorts:
      postgresql: ''
    portName: postgresql
    ports:
      postgresql: 5432
    serviceLabels: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ''
  volumePermissions:
    enabled: false
    image:
      digest: ''
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r45
    podSecurityContext:
      runAsUser: 0
    resources:
      limits: {}
      requests: {}
postgresqlExternal:
  database: thingsboard
  hostname: setplease
  password: setplease
  port: 5432
  username: postgres
redis:
  architecture: cluster
  cluster:
    nodes: 6
    replicas: 1
  auth:
    enabled: true
    existingSecret: ''
    existingSecretPasswordKey: ''
    password: setplease
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      image:
        pullPolicy: Always
        pullSecrets: null
        server: docker.io
        tag: 4.0.1
      imagePullSecrets: null
      imageRegistry: ''
      jsonLogs: false
      redis:
        password: ''
      storageClass: ''
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 32mb
    maxmemory 8gb
    maxmemory-policy allkeys-lru
    tcp-keepalive 60
  commonLabels: {}
  diagnosticMode:
    args:
      - infinity
    command:
      - sleep
    enabled: false
  existingConfigmap: ''
  extraDeploy: null
  fullnameOverride: ''
  global:
    image:
      pullPolicy: Always
      pullSecrets: null
      server: docker.io
      tag: 4.0.1
    imagePullSecrets: null
    imageRegistry: ''
    jsonLogs: false
    redis:
      password: ''
    storageClass: ''
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.6-debian-10-r142
  kubeVersion: ''
  master:
    affinity: {}
    args: null
    command: null
    configuration: ''
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
      - FLUSHALL
    extraEnvVars: null
    volumeMounts:
      - name: start-scripts
        mountPath: /opt/bitnami/scripts/start-scripts
      - name: health
        mountPath: /health
      - name: redis-data
        mountPath: /data
      - name: config
        mountPath: /opt/bitnami/redis/mounted-etc
      - name: redis-tmp-conf
        mountPath: /opt/bitnami/redis/etc/
      - name: tmp
        mountPath: /tmp
    volumes:
      - name: start-scripts
        configMap:
          name: thingsboard-redis-scripts
          defaultMode: 493
      - name: health
        configMap:
          name: thingsboard-redis-health
          defaultMode: 493
      - name: config
        configMap:
          name: thingsboard-redis-configuration
          defaultMode: 420
      - name: redis-tmp-conf
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: redis-data
        emptyDir: {}
    serviceAccountName: thingsboard-redis
    serviceAccount: thingsboard-redis
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraFlags: null
    extraVolumeMounts: null
    extraVolumes: null
    hostAliases: null
    initContainers: null
    kind: Deployment
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ''
      type: ''
      values: null
    nodeSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      existingClaim: ''
      medium: ''
      path: /data
      selector: {}
      size: 8Gi
      storageClass: ''
      subPath: ''
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: null
    priorityClassName: ''
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ''
    service:
      annotations: {}
      clusterIP: ''
      externalTrafficPolicy: Cluster
      extraPorts: null
      loadBalancerIP: ''
      loadBalancerSourceRanges: null
      nodePorts:
        redis: ''
      ports:
        redis: 6379
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: null
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: null
    topologySpreadConstraints: {}
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    command: null
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: false
    extraArgs: {}
    extraVolumeMounts: null
    extraVolumes: null
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.35.1-debian-10-r12
    podAnnotations:
      prometheus.io/port: '9121'
      prometheus.io/scrape: 'true'
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ''
      rules: null
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: null
      loadBalancerIP: ''
      loadBalancerSourceRanges: null
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: null
      namespace: ''
      relabellings: null
      scrapeTimeout: ''
  nameOverride: ''
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: null
    extraIngress: null
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: null
  replica:
    affinity: {}
    args: null
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ''
      targetMemory: ''
    command: null
    configuration: ''
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    externalMaster:
      enabled: false
      host: ''
      port: 6379
    extraEnvVars: null
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraFlags: null
    extraVolumeMounts: null
    extraVolumes: null
    hostAliases: null
    initContainers: null
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ''
      type: ''
      values: null
    nodeSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      medium: ''
      path: /data
      selector: {}
      size: 8Gi
      storageClass: ''
      subPath: ''
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ''
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: null
    priorityClassName: ''
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    schedulerName: ''
    service:
      annotations: {}
      clusterIP: ''
      externalTrafficPolicy: Cluster
      extraPorts: null
      loadBalancerIP: ''
      loadBalancerSourceRanges: null
      nodePorts:
        redis: ''
      ports:
        redis: 6379
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: null
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: null
    topologySpreadConstraints: {}
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  sentinel:
    args: null
    automateClusterRecovery: false
    command: null
    configuration: ''
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ''
      port: 6379
    extraEnvVars: null
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: null
    extraVolumes: null
    failoverTimeout: 18000
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.6-debian-10-r140
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    preExecCmds: null
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ''
      externalTrafficPolicy: Cluster
      extraPorts: null
      loadBalancerIP: ''
      loadBalancerSourceRanges: null
      nodePorts:
        redis: ''
        sentinel: ''
      ports:
        redis: 6379
        sentinel: 26379
      type: ClusterIP
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ''
  sysctl:
    command: null
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r351
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ''
    certFilename: ''
    certKeyFilename: ''
    certificatesSecret: ''
    dhParamsFilename: ''
    enabled: false
    existingSecret: ''
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ''
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r351
    resources:
      limits: {}
      requests: {}
rule-engine:
  prometheus-stats:
    enabled: true
  queues:
    main:
      processing-strategy-type: SKIP_ALL_FAILURES_AND_TIMED_OUT
serviceAccount:
  annotations: {}
  create: true
  name: ''
sql:
  attributes:
    batch:
      threads: 30
  events:
    batch:
      threads: 10
  timescale:
    batch:
      threads: 10
  ts:
    batch:
      threads: 10
    ttl:
      enabled: true
      execution_interval: 86400000
      value: 0
  ts-latest:
    batch:
      threads: 10
timescale:
  enabled: false
webui:
  affinity: {}
  annotations: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  image:
    repository: thingsboard/tb-pe-web-ui
  kind: Deployment
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  port:
    name: http
    number: 8084
    protocol: TCP
  replicaCount: 1
  securityContext: {}
  service:
    additionalPorts: null
    port: 8084
    type: ClusterIP
  tolerations: null

# ThingsBoard PE License Configuration
license:
  # License key for ThingsBoard Professional Edition
  # This should be your actual license key from ThingsBoard portal
  secret: "biGeBHrEO4LaxCqPQa9imyFL"
  
  # License server configuration
  server:
    url: "https://license.thingsboard.io"
    connectionTimeout: 30000
    readTimeout: 60000
  
  # License validation settings
  validation:
    enabled: true
    onStartup: true
    skipOnStartupFailure: false
    retryCount: 10
    retryDelay: 30000
    checkInterval: 60000
    retryInterval: 10000
  
  # License data file path (for persistence)
  instanceDataFile: "/data/license.data"
  
  # License secret name (if using Kubernetes secret)
  secretName: "thingsboard-license"
  
  # Comments for production deployment
  # 1. Replace 'secret' value with your actual license key
  # 2. Ensure the license secret exists in your namespace
  # 3. License data persists in /data/license.data for pod restarts
  # 4. Instance ID will be automatically generated and reused
